

import matplotlib.pyplot as plt
import numpy as np
from numpy.linalg import norm
from math import sqrt, pi, cos, sin
import intermediateTests as itt
from optiPython import blockCoordinateGradient, plotResults, fObj_noTops, gradient_TY
from analyticSol_circle import trueSolution # So that we can test all of this in an actual "true geometry
import colorcet as cc
import matplotlib.colors as clr
from mpl_toolkits.mplot3d import axes3d


# colormap2  = clr.LinearSegmentedColormap.from_list('Retro',
#                                                    [(0,    '#000000'),
#                                                     (0.1, '#2c3454'),
#                                                     (0.25, '#0033ff'),
#                                                     (0.60, '#00f3ff'),
#                                                     (1,    '#e800ff')], N=256)

colormap2 = "cet_linear_worb_100_25_c53_r"
colormap2_r = "cet_linear_worb_100_25_c53"

maxIter = 30
tol = 1e-10


###########################################
###########################################
###########################################
###########################################
## TEST OPTIPYTHON IN THE CIRCLE 
## Recall that we know the analytic solution to the circle problem

# Test 1: x0 and x1 are on the boundary, xHat=x2 is inside the circle



###########################################
print("\n\n\n x0 and x1 on the boundary close\n\n")

xSource = np.array([-15, -10])
center = np.array([0,0])
R = 10.0
eta1 = 1.0
eta2 = 1.452

t0 = 1.865*pi
t1 = 1.87*pi

# Define the points
x0 = np.array([10*cos(t0), 10*sin(t0)])
x1 = np.array([10*cos(t1), 10*sin(t1)])
x2 = np.array([x1[0] - 0.05, x1[1]])
xHat = x2

hc = norm(x0-x1)

# Their derivatives
B01 = np.array([-sin(t0), cos(t0)])
B01 = (B01/norm(B01))*sqrt(hc)
B1 = np.array([-sin(t1), cos(t1)])
B1 = (B1/norm(B1))*sqrt(hc)
B02 = x2 - x0 # Because x2 is NOT on the boundary, we have to not normalize it for this to be a straight line
B2 = np.copy(B02) # Because x2 is not on the boundary

listIndices = [eta2, eta2]
listxk = [x0, x1, x2]
listB0k = [B01, B02]
listBk = [B1, B2]

# Compute solutions

T0, type0, grad0 = trueSolution(x0[0], x0[1], xSource, center, R, eta1, eta2)
grad0 = np.array(grad0)
T1, type1, grad1 = trueSolution(x1[0], x1[1], xSource, center, R, eta1, eta2)
grad1 = np.array(grad1)

# Compute the true solution for x2

T2, type2, grad2 = trueSolution(x2[0], x2[1], xSource, center, R, eta1, eta2)

# Use blockCoordinateGradient

mu1 = 0.4
lam2 = 0.6
params0 = [mu1, lam2]
f0 = fObj_noTops(params0, x0, T0, grad0, x1, T1, grad1, x2, listIndices, listxk, listB0k, listBk)

itt.plotFann(x0, listB0k, listxk, listBk, params = params0)
plt.title("Initial parameters")
