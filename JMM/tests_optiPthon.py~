# Before going to C with the optimization ruting
# we test optiPython and intermediateTests here


import matplotlib.pyplot as plt
import numpy as np
from numpy.linalg import norm
from math import sqrt, pi
import intermediateTests as itt
import optiPython as optP
from analyticSol_circle import trueSolution # So that we can test all of this in an actual "true geometry


      
###########################################
## NAIVELY TEST OPTIPYTHON
## TESTS FOR THESE FUNCTIONS

x0 = np.array([0.0,0.0])
x1 = np.array([2, -0.2])
x2 = np.array([1.5, 0.8])
x3 = np.array([0.2, 1.2])
xHat = np.array([-0.8, 0.7])
B01 = np.array([2.2, 1])
B01 = B01/norm(B01)
B02 = np.array([1, 1.5])
B02 = B02/norm(B02)
B03 = np.array([0.2, 2])
B03 = B03/norm(B03)
B0Hat = np.array([-1, 0.4])
B0Hat = B0Hat/norm(B0Hat)
B1 = np.array([1, -0.6])
B1 = B1/norm(B1)
B2 = np.array([2, -0.2])
B2 = B2/norm(B2)
B3 = np.array([1, 2])
B3 = B3/norm(B3)
BHat = np.array([-1, 1])
BHat = BHat/norm(BHat)


mu1 = 0.15
lam2 = 0.15
mu2 = 0.13
lam3 = 0.17
mu3 = 0.15
lam4 = 1
params = [mu1, lam2, mu2, lam3, mu3, lam4]

xSource = np.array([ 1, -0.5 ])
T0 = norm(xSource - x0)
grad0 = (x0 - xSource)/T0
T1 = norm(xSource - x1)
grad1 = (x1 - xSource)/T1

THat_true = norm(xHat - xSource)

listIndices = [1.0, 1.0, 1.0, 1.0]
listxk = [x0, x1, x2, x3, xHat]
listB0k = [B01, B02, B03, B0Hat]
listBk = [B1, B2, B3, BHat]


# # Compute the projected gradient descent

maxIter = 20
tol = 1e-8

# Another example
print("Start test foward pass update \n\n")

mu1 = 0.1
lam2 = 0.5
mu2 = 0.5
lam3 = 0.9
mu3 = 0.9
lam4 = 0
params = [mu1, lam2, mu2, lam3, mu3, lam4]



paramsOpt, listObjVals, listGrads = blockCoordinateGradient(params, x0, T0, grad0, x1, T1, grad1, xHat, listIndices, listxk, listB0k, listBk, maxIter, tol)

fig = plt.figure(figsize=(800/96, 800/96), dpi=96)
plt.semilogy( range(0, len(listObjVals)), listObjVals)
plt.title("Decrease in function value")


fig = plt.figure(figsize=(800/96, 800/96), dpi=96)
plt.semilogy( range(0, len(listGrads)), listGrads)
plt.title("Decrease in norm of gradient")


# # Another example

# print("Start test foward pass update \n\n")


# mu1 = 0.5
# lam2 = 0.65
# mu2 = 0.5
# lam3 = 0.75
# mu3 = 0.5
# lam4 = 0.45
# params = [mu1, lam2, mu2, lam3, mu3, lam4]
# listIndices = [1.0, 1.5, 2, 1.0]


# itt.plotFan3(x0, *listB0k, listxk[1], listBk[0], listxk[2], listBk[1], listxk[3], listBk[2], xHat, listBk[3], *params)

# paramsOpt, listObjVals, listGrads = blockCoordinateGradient(params, x0, T0, grad0, x1, T1, grad1, xHat, listIndices, listxk, listB0k, listBk, maxIter, tol)


# fig = plt.figure(figsize=(800/96, 800/96), dpi=96)
# plt.semilogy( range(0, len(listObjVals)), listObjVals)
# plt.title("Decrease in function value")

# fig = plt.figure(figsize=(800/96, 800/96), dpi=96)
# plt.semilogy( range(0, len(listGrads)), listGrads)
# plt.title("Decrease in norm of gradient")



# print("Start test foward pass update \n\n")


# mu1 = 0.5
# lam2 = 0.65
# mu2 = 0.5
# lam3 = 0.75
# mu3 = 0.5
# lam4 = 0.45
# params = [mu1, lam2, mu2, lam3, mu3, lam4]
# listIndices = [3.5, 1, 0.5, 1.0]


# itt.plotFan3(x0, *listB0k, listxk[1], listBk[0], listxk[2], listBk[1], listxk[3], listBk[2], xHat, listBk[3], *params)

# paramsOpt, listObjVals, listGrads = blockCoordinateGradient(params, x0, T0, grad0, x1, T1, grad1, xHat, listIndices, listxk, listB0k, listBk, maxIter, tol)


# fig = plt.figure(figsize=(800/96, 800/96), dpi=96)
# plt.semilogy( range(0, len(listObjVals)), listObjVals)
# plt.title("Decrease in function value")

# fig = plt.figure(figsize=(800/96, 800/96), dpi=96)
# plt.semilogy( range(0, len(listGrads)), listGrads)
# plt.title("Decrease in norm of gradient")


#paramsUp = forwardPassUpdate(params, x0, T0, grad0, x1, T1, grad1, xHat, listIndices, listxk, listB0k, listBk)

# print(paramsUp)
# print("Objective function value:", fObj_noTops(paramsUp, x0, T0, grad0, x1, T1, grad1, xHat, listIndices, listxk, listB0k, listBk) )

# print(" \n\n Start test backward pass update \n\n")


# paramsDown, grad2T1 = backwardPassUpdate(paramsUp, x0, T0, grad0, x1, T1, grad1, xHat, listIndices, listxk, listB0k, listBk)

# print(paramsDown)

# print("Objective function value:", fObj_noTops(paramsDown, x0, T0, grad0, x1, T1, grad1, xHat, listIndices, listxk, listB0k, listBk) )


# print("Start test2 foward pass update \n\n")

# paramsUp = forwardPassUpdate(paramsDown, x0, T0, grad0, x1, T1, grad1, xHat, listIndices, listxk, listB0k, listBk)

# print(paramsUp)
# print("Objective function value:", fObj_noTops(paramsUp, x0, T0, grad0, x1, T1, grad1, xHat, listIndices, listxk, listB0k, listBk) )

# print(" \n\n Start test2 backward pass update \n\n")


# paramsDown, grad2T2 = backwardPassUpdate(paramsUp, x0, T0, grad0, x1, T1, grad1, xHat, listIndices, listxk, listB0k, listBk)

# print(paramsDown)

# print("Objective function value:", fObj_noTops(paramsDown, x0, T0, grad0, x1, T1, grad1, xHat, listIndices, listxk, listB0k, listBk) )







